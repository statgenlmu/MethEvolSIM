import os
import random

configfile: "config.yaml"

workdir: config["wdir"]

recombination_rates = config["recombination_rates"]

#random.seed(config["seed"])
n_sim = config["n_sim"]

sim_ids = [str(i).zfill(len(str(n_sim))) for i in range(1, n_sim + 1)]
pad_n = len(str(n_sim)) + 1
sim_ids_padded = [str(i).zfill(pad_n) for i in range(1, n_sim + 1)]

rule all:
    input:
        #expand("out_tips/nikolas_dataSIM_{sim_id_padded}.RData", sim_id_padded=sim_ids_padded),
        "out/summary_statistics/summary_stats.csv",
        "out/plots"

rule sample_recombination_rates:
    output:
        "{output_dir}/recombination_rates.csv".format(output_dir=config["output_dir"])
    params:
        nsim=config["n_sim"],
        seed=config["seed"],
        output="out/recombination_rates.csv",
        sampling_script=config["scripts"]["recrate_sampling.py"],
        lower_bound=config["recombination_rates"]["recrate_lowerbound"],
        upper_bound=config["recombination_rates"]["recrate_upperbound"],
        outdir="out"
    shell:
        """
        python {params.sampling_script} \
            --nsim {params.nsim} \
            --seed {params.seed} \
            --output {output} \
            --lowerbound {params.lower_bound} \
            --upperbound {params.upper_bound} \
            --outdir {params.outdir}
        """


rule generate_args:
    input:
        rates = "{output_dir}/recombination_rates.csv".format(output_dir=config["output_dir"]),
    output:
        nodes = expand("{output_dir}/nodes/nodes_{sim_id}.csv",
            output_dir=config["output_dir"],sim_id=sim_ids_padded),
        edges=expand("{output_dir}/edges/edges_{sim_id}.csv",
            output_dir=config["output_dir"],sim_id=sim_ids_padded)

    params:
        samples=config["simulation_params"]["samples"],
        ploidy=config["simulation_params"]["ploidy"],
        populationsize=config["simulation_params"]["populationsize"],
        sequencelength=config["simulation_params"]["sequencelength"],
        nsim=config["n_sim"],
        simulation_py=config["scripts"]["simulation_py"],
        output_dir=config["output_dir"],
        #recrate=0.005,
    threads: 1
    shell:
        """
        python {params.simulation_py} \
            --samples {params.samples} \
            --ploidy {params.ploidy} \
            --populationsize {params.populationsize} \
            --recrates {input.rates} \
            --sequencelength {params.sequencelength} \
            --output {params.output_dir} \
            --nsim {params.nsim} \
        """

rule run_simulations:
    input:
        nodes=expand("{output_dir}/nodes/nodes_{sim_id}.csv",
                     output_dir=config["output_dir"], sim_id=sim_ids_padded),
        edges=expand("{output_dir}/edges/edges_{sim_id}.csv",
                     output_dir=config["output_dir"], sim_id=sim_ids_padded)
    output:
        tip_lists=expand("out_tips/nikolas_dataSIM_{sim_id_padded}.RData", sim_id_padded=sim_ids_padded)
    params:
        alpha_pI=config["simulation_r_params"]["alpha_pI"],
        beta_pI=config["simulation_r_params"]["beta_pI"],
        alpha_mI=config["simulation_r_params"]["alpha_mI"],
        beta_mI=config["simulation_r_params"]["beta_mI"],
        alpha_pNI=config["simulation_r_params"]["alpha_pNI"],
        beta_pNI=config["simulation_r_params"]["beta_pNI"],
        alpha_mNI=config["simulation_r_params"]["alpha_mNI"],
        beta_mNI=config["simulation_r_params"]["beta_mNI"],
        alpha_Ri=config["simulation_r_params"]["alpha_Ri"],
        iota=config["simulation_r_params"]["iota"],
        mu=config["simulation_r_params"]["mu"],
        population=config["simulation_params"]["populationsize"],
        samples=config["simulation_params"]["samples"],
        seqlen=config["simulation_params"]["sequencelength"],
        nodes_dir=os.path.join(config["output_dir"], "nodes"),
        edges_dir=os.path.join(config["output_dir"], "edges"),
        output_dir="out_tips",
        script=config["scripts"]["run_sim.R"],
        cores=config["n_cores"]
    shell:
        """
        Rscript {params.script} \
            --alpha_pI {params.alpha_pI} \
            --beta_pI {params.beta_pI} \
            --alpha_mI {params.alpha_mI} \
            --beta_mI {params.beta_mI} \
            --alpha_pNI {params.alpha_pNI} \
            --beta_pNI {params.beta_pNI} \
            --alpha_mNI {params.alpha_mNI} \
            --beta_mNI {params.beta_mNI} \
            --alpha_Ri {params.alpha_Ri} \
            --iota {params.iota} \
            --mu {params.mu} \
            --population {params.population} \
            --samples {params.samples} \
            --nodes {params.nodes_dir} \
            --edges {params.edges_dir} \
            --seqlen {params.seqlen} \
            --outputdir {params.output_dir} \
            --nsim {n_sim} \
            --ncores {params.cores}
        """

rule compute_summary_stats:
    input:
        tip_lists=expand("out_tips/nikolas_dataSIM_{sim_id_padded}.RData", sim_id_padded=sim_ids_padded)
    output:
        summary_stats="out/summary_statistics/summary_stats.csv"
    params:
        script=config["scripts"]["nikolas_sumstats.R"],
        tipdir = os.path.join("out_tips"),
        recrates = "out/recombination_rates.csv",
        samples = config["simulation_params"]["samples"]
    shell:
        """
        Rscript {params.script} \
            --tipdir {params.tipdir} \
            --output out/summary_statistics \
            --nsim {n_sim} \
            --recrates {params.recrates} \
            --samples {params.samples}
        """
rule plot_sum_stats:
    input:
        sumstats = "{output_dir}/summary_statistics/summary_stats.csv".format(output_dir=config["output_dir"])
    output:
        plots=directory("out/plots")
    params:
        script=config["scripts"]["nikolas_plot.R"],
        outdir="out/plots"
    shell:
        """
        Rscript {params.script} \
            --sumstats {input.sumstats} \
            --outdir {params.outdir}
        """














